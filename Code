## **Package Loading**
import pandas as pd
import numpy as np
import polars as pl
import gc
from itertools import combinations
from numba import njit, prange

## **Load Data**
train = pd.read_csv("C:/Users/32536/Desktop/kaggle/optiver/train.csv")

df = train.dropna(subset=["target"]).reset_index(drop=True)

## **Triplet Imbalance Calculation Function**
@njit(parallel=True)
def compute_triplet_imbalance(df_values, comb_indices):
    num_rows = df_values.shape[0]
    num_combinations = len(comb_indices)
    imbalance_features = np.empty((num_rows, num_combinations))

    for i in prange(num_combinations):
        a, b, c = comb_indices[i]
        for j in range(num_rows):
            max_val = max(df_values[j, a], df_values[j, b], df_values[j, c])
            min_val = min(df_values[j, a], df_values[j, b], df_values[j, c])
            mid_val = df_values[j, a] + df_values[j, b] + df_values[j, c] - min_val - max_val

            if mid_val == min_val:
                imbalance_features[j, i] = np.nan
            else:
                imbalance_features[j, i] = (max_val - mid_val) / (mid_val - min_val)

    return imbalance_features

## **Triplet Imbalance Wrapper**
def calculate_triplet_imbalance_numba(price, df):
    df_values = df[price].values
    comb_indices = [(price.index(a), price.index(b), price.index(c)) for a, b, c in combinations(price, 3)]
    features_array = compute_triplet_imbalance(df_values, comb_indices)
    columns = [f"{a}_{b}_{c}_imb2" for a, b, c in combinations(price, 3)]
    return pd.DataFrame(features_array, columns=columns)

## **Imbalance Feature Generation**
def imbalance_features(df):
    df = df.copy()  # Avoid SettingWithCopyWarning

    # Price & Size Features
    prices = ["reference_price", "far_price", "near_price", "ask_price", "bid_price", "wap"]
    sizes = ["matched_size", "bid_size", "ask_size", "imbalance_size"]

    df["volume"] = df["ask_size"] + df["bid_size"]
    df["mid_price"] = (df["ask_price"] + df["bid_price"]) / 2
    df["liquidity_imbalance"] = (df["bid_size"] - df["ask_size"]) / (df["bid_size"] + df["ask_size"])
    df["matched_imbalance"] = (df["imbalance_size"] - df["matched_size"]) / (df["matched_size"] + df["imbalance_size"])
    df["size_imbalance"] = df["bid_size"] / df["ask_size"]
    df["order_flow_imbalance"] = (df["bid_size"] - df["ask_size"]) * (df["bid_price"] - df["ask_price"])
    df["total_order_book_volume"] = df["bid_size"] + df["ask_size"]
    df["bid_ask_ratio"] = df["bid_size"] / (df["ask_size"] + 1e-6)  # Prevent division by zero
    df["spread_ratio"] = (df["ask_price"] - df["bid_price"]) / df["mid_price"]
    df["weighted_order_flow_imbalance"] = (df["bid_size"] - df["ask_size"]) * (df["bid_price"] - df["ask_price"]) / df["mid_price"]




    for c in combinations(prices, 2):
        df[f"{c[0]}_{c[1]}_imb"] = (df[c[0]] - df[c[1]]) / (df[c[0]] + df[c[1]])

    # Ensure Required Columns Exist
    for col in ["ask_price", "bid_price", "wap", "reference_price"]:
        if col not in df.columns:
            df[col] = np.nan  # Prevent missing column errors

    for c in [["ask_price", "bid_price", "wap", "reference_price"], sizes]:
        triplet_feature = calculate_triplet_imbalance_numba(c, df)
        df = df.join(triplet_feature)

    df["price_spread"] = df["ask_price"] - df["bid_price"]
    df["spread_intensity"] = df.groupby(['stock_id'])['price_spread'].diff()
    df["price_pressure"] = df["imbalance_size"] * (df["ask_price"] - df["bid_price"])
    df["market_urgency"] = df["price_spread"] * df["liquidity_imbalance"]
    df["spread_depth_ratio"] = (df["ask_price"] - df["bid_price"]) / (df["bid_size"] + df["ask_size"])
    df["mid_price_movement"] = df["mid_price"].diff(periods=5).apply(lambda x: 1 if x > 0 else (-1 if x < 0 else 0))

    # Ensure Rolling Difference Columns Exist Before Rolling Stats
    for window in [3, 5, 10]:
        for col in ["ask_price", "bid_price", "ask_size", "bid_size"]:
            diff_col = f"{col}_diff_{window}"
            if diff_col not in df.columns:
                df[diff_col] = df.groupby("stock_id")[col].diff(periods=window)

    # Apply Rolling Mean & Std Per Stock Using groupby()
    for window in [3, 5, 10]:
        for col in ["ask_price", "bid_price", "ask_size", "bid_size"]:
            diff_col = f"{col}_diff_{window}"
            if diff_col in df.columns:
                df[f'rolling_diff_{col}_{window}'] = df.groupby("stock_id")[diff_col].rolling(window).mean().reset_index(level=0, drop=True)
                df[f'rolling_std_diff_{col}_{window}'] = df.groupby("stock_id")[diff_col].rolling(window).std().reset_index(level=0, drop=True)



    # Apply Rolling Mean & Std to Other Features
    for window in [3, 5, 10, 30]:
        df[f"rolling_spread_mean_{window}"] = (
            df.groupby("stock_id")["price_spread"]
            .rolling(window)
            .mean()
            .reset_index(level=0, drop=True)
        )

        df[f"rolling_spread_std_{window}"] = (
            df.groupby("stock_id")["price_spread"]
            .rolling(window)
            .std()
            .reset_index(level=0, drop=True)
        )

        df[f"rolling_volatility_{window}"] = (
            df.groupby("stock_id")["mid_price"]
            .rolling(window)
            .std()
            .reset_index(level=0, drop=True)
        )

    # Apply Mean Reversion Indicator
    for window in [5, 10, 30]:
        df[f"mean_reversion_{window}"] = (
            (df["mid_price"] - df.groupby("stock_id")["mid_price"].rolling(window).mean().reset_index(level=0, drop=True))
            / (df.groupby("stock_id")["mid_price"].rolling(window).std().reset_index(level=0, drop=True) + 1e-6)
        )
    # Momentum Indicators
    for window in [3, 5, 10, 30]:
        df[f"price_momentum_{window}"] = df.groupby("stock_id")["mid_price"].diff(window)

    for window in [5, 10, 30]:
        df[f"spread_compression_{window}"] = df.groupby("stock_id")["price_spread"].diff(window)

    for col in ["mid_price", "bid_price", "ask_price", "wap"]:
        df[f"{col}_diff1"] = df.groupby("stock_id")[col].diff()
        df[f"{col}_diff2"] = df.groupby("stock_id")[col].diff().diff()




    # Relative Volatility Index (RVI)
    window = 14
    df["volatility_up"] = df.groupby("stock_id")["mid_price"].diff().where(df["mid_price"].diff() > 0, 0).rolling(window).std().reset_index(level=0, drop=True)
    df["volatility_down"] = df.groupby("stock_id")["mid_price"].diff().where(df["mid_price"].diff() < 0, 0).rolling(window).std().reset_index(level=0, drop=True)
    df["rvi"] = df["volatility_up"] / (df["volatility_up"] + df["volatility_down"] + 1e-6)

    # Fourier Transform
    df["fourier_mid_price"] = np.fft.fft(df["mid_price"]).real


    gc.collect()

    df["mid_price*volume"] = df["mid_price_movement"] * df["volume"]

    # **Handle Inf Values**
    df.replace([np.inf, -np.inf], 0, inplace=True)

    return df

## **Other Time-Based Features**
def other_features(df):
    df["dow"] = df["date_id"] % 5
    df["seconds"] = df["seconds_in_bucket"] % 60
    df["minute"] = df["seconds_in_bucket"] // 60
    df["time_to_market_close"] = 540 - df["seconds_in_bucket"]
    return df

## **Master Function: Generate All Features**
def generate_all_features(df):
    cols = [c for c in df.columns if c not in ["row_id", "time_id", "target"]]
    df = df[cols]

    df = imbalance_features(df)
    gc.collect()

    df = other_features(df)
    gc.collect()

    feature_name = [i for i in df.columns if i not in ["row_id", "target", "time_id", "date_id"]]
    return df[feature_name]
